                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ce00000000000000 | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f67805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76005000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f33103710500000000 |     irmovq $0x5710331, %rbx
0x03c: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x046: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x050: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x05a: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x064: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x06e: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x078: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x082: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x08c: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x096: 80a900000000000000   | 	call absrev		 
0x09f: 80ec03000000000000   | 	call check	        # Call checker code
0x0a8: 00                   | 	halt                # should halt with 0xaaaa in %rax
0x0a9:                      | StartFun:
0x0a9:                      | absrev:
0x0a9: 6300                 |     xorq %rax, %rax	# sum = 0;
0x0ab: 6311                 |     xorq %rcx, %rcx # *dst_rev = 0
0x0ad: 6021                 |     addq %rdx, %rcx 
0x0af: 6011                 |     addq %rcx, %rcx
0x0b1: 6011                 |     addq %rcx, %rcx
0x0b3: 6011                 |     addq %rcx, %rcx
0x0b5: 6061                 |     addq %rsi, %rcx # *dst_rev = dst + len
0x0b7: 30fc0800000000000000 |     irmovq $8, %r12
0x0c1: 61c1                 |     subq %r12, %rcx  # *dst_rev = dst + len - 1
0x0c3: 61c2                 | 	subq  %r12, %rdx # if len < 6 go to M
0x0c5: 725702000000000000   | 	jl     M     
                            | 
0x0ce:                      | K:
0x0ce: 50870000000000000000 | 	mrmovq (%rdi), %r8     	# src[i] to %r8
0x0d8: 50970800000000000000 | 	mrmovq 8(%rdi), %r9    	# src[i+1] to %r9
0x0e2: 40810000000000000000 | 	rmmovq %r8, (%rcx)     	# src[i] to dst[len - 1]
0x0ec: 6288                 |     andq   %r8, %r8       	# src[i] <= 0?
0x0ee: 710201000000000000   |     jle K1
0x0f7: 6080                 |     addq %r8, %rax #sum +=src[i]
0x0f9: 700401000000000000   |     jmp K2
0x102:                      | K1:
0x102: 6180                 |     subq %r8, %rax 
0x104:                      | K2:
0x104: 4091f8ffffffffffffff |     rmmovq %r9, -8(%rcx) # src [i+1] to dst[len-2]
0x10e: 6299                 |     andq   %r9, %r9      # src [i+1] <= 0?
0x110: 712401000000000000   |     jle K4
0x119: 6090                 |     addq %r9, %rax #sum +=src[i+1]
0x11b: 702601000000000000   |     jmp K5
0x124:                      | K4:
0x124: 6190                 |     subq %r9, %rax
0x126:                      | K5:
0x126: 50871000000000000000 |     mrmovq 16(%rdi), %r8    # src[i+2] to %r8
0x130: 50971800000000000000 | 	mrmovq 24(%rdi), %r9    	# src[i+3] to %r9
0x13a: 4081f0ffffffffffffff | 	rmmovq %r8, -16(%rcx)     	# src[i+2] to dst[len -3]
0x144: 6288                 |     andq   %r8, %r8       	# src[i+2] <= 0?
0x146: 715a01000000000000   |     jle K6
0x14f: 6080                 |     addq %r8, %rax #sum +=src[i+2]
0x151: 705c01000000000000   |     jmp K7
0x15a:                      | K6:
0x15a: 6180                 |     subq %r8, %rax
0x15c:                      | K7:
0x15c: 4091e8ffffffffffffff |     rmmovq %r9, -24(%rcx) # src [i+3] to dst[len-4]
0x166: 6299                 |     andq   %r9, %r9      # src [i+3] <= 0?
0x168: 717c01000000000000   |     jle K8
0x171: 6090                 |     addq %r9, %rax #sum +=src[i+3]
0x173: 707e01000000000000   |     jmp K9
0x17c:                      | K8:
0x17c: 6190                 |     subq %r9, %rax
0x17e:                      | K9:
0x17e: 50872000000000000000 |     mrmovq 32(%rdi), %r8    # src[i+4] to %r8
0x188: 50972800000000000000 | 	mrmovq 40(%rdi), %r9   	# src[i+5] to %r9    
0x192: 4081e0ffffffffffffff | 	rmmovq %r8, -32(%rcx)   # src[i+4] to dst[len-5]
0x19c: 6288                 |     andq   %r8, %r8       	# src[i+4] <= 0?
0x19e: 71b201000000000000   |     jle K10
0x1a7: 6080                 |     addq %r8, %rax #sum +=src[i+4]
0x1a9: 70b401000000000000   |     jmp K11
0x1b2:                      | K10:
0x1b2: 6180                 |     subq %r8, %rax 
0x1b4:                      | K11:
0x1b4: 4091d8ffffffffffffff |     rmmovq %r9, -40(%rcx)   # src[i+5] to dst[len-6]
0x1be: 6299                 |     andq   %r9, %r9       	# src[i+4] <= 0?
0x1c0: 71d401000000000000   |     jle K12
0x1c9: 6090                 |     addq %r9, %rax #sum +=src[i+5]
0x1cb: 70d601000000000000   |     jmp K13
0x1d4:                      | K12:
0x1d4: 6190                 |     subq %r9, %rax     
0x1d6:                      | K13:
0x1d6: 50873000000000000000 |     mrmovq 48(%rdi), %r8    # src[i+6] to %r8
0x1e0: 50973800000000000000 |     mrmovq 56(%rdi), %r9   	# src[i+7] to %r9 
0x1ea: 4081d0ffffffffffffff | 	rmmovq %r8, -48(%rcx)   # src[i+6] to dst[len-7]
0x1f4: 6288                 |     andq   %r8, %r8       	# src[i+6] <= 0?
0x1f6: 710a02000000000000   |     jle K14
0x1ff: 6080                 |     addq %r8, %rax #sum +=src[i+6]
0x201: 700c02000000000000   |     jmp K15
0x20a:                      | K14:
0x20a: 6180                 |     subq %r8, %rax 
0x20c:                      | K15:
0x20c: 4091c8ffffffffffffff |     rmmovq %r9, -56(%rcx)   # src[i+7] to dst[len-8]
0x216: 6299                 |     andq   %r9, %r9       	# src[i+7] <= 0?
0x218: 712c02000000000000   |     jle K16
0x221: 6090                 |     addq %r9, %rax #sum +=src[i+7]
0x223: 702e02000000000000   |     jmp K17
0x22c:                      | K16:
0x22c: 6190                 |     subq %r9, %rax     
0x22e:                      | K17:
                            | #    irmovq $64, %r12 
                            | #    addq  %r12, %rdi  # src = src+6
                            | #    subq %r12, %rcx # dst = dst-6
0x22e: d0774000000000000000 | 	leaq 64(%rdi), %rdi
0x238: d011c0ffffffffffffff | 	leaq -64(%rcx),%rcx
0x242: 30fc0800000000000000 | 	irmovq $8, %r12
0x24c: 61c2                 | 	subq  %r12, %rdx # if len >= 6 go to K
0x24e: 75ce00000000000000   | 	jge K     
                            | 
                            | 
                            | 
0x257:                      | M:
0x257: 60c2                 | 	addq  %r12, %rdx #original len val
0x259: 30fc0100000000000000 | 	irmovq $1, %r12 
0x263: 61c2                 | 	subq  %r12, %rdx #len--
0x265: 756f02000000000000   | 	jge M0 
0x26e: 90                   | 	ret #if len<= return
0x26f:                      | M0:
0x26f: 50870000000000000000 | 	mrmovq (%rdi), %r8     	# src[i] to %r8
0x279: 50970800000000000000 | 	mrmovq 8(%rdi), %r9    	# src[i+1] to %r9
0x283: 40810000000000000000 | 	rmmovq %r8, (%rcx)     	# src[i] to dst[len - 1]
0x28d: 6288                 |     andq   %r8, %r8       	# src[i] <= 0?
0x28f: 71a302000000000000   |     jle M1
0x298: 6080                 |     addq %r8, %rax #sum +=src[i]
0x29a: 70a502000000000000   |     jmp M2
0x2a3:                      | M1:
0x2a3: 6180                 |     subq %r8, %rax 
0x2a5:                      | M2:
0x2a5: 61c2                 |     subq  %r12, %rdx #len--
0x2a7: 75b102000000000000   | 	jge M3 
0x2b0: 90                   | 	ret #if len<= return   
0x2b1:                      | M3:
0x2b1: 4091f8ffffffffffffff |     rmmovq %r9, -8(%rcx) # src [i+1] to dst[len-2]
0x2bb: 6299                 |     andq   %r9, %r9      # src [i+1] <= 0?
0x2bd: 71d102000000000000   |     jle M4
0x2c6: 6090                 |     addq %r9, %rax #sum +=src[i+1]
0x2c8: 70d302000000000000   |     jmp M5
0x2d1:                      | M4:
0x2d1: 6190                 |     subq %r9, %rax
0x2d3:                      | M5:
0x2d3: 61c2                 |     subq  %r12, %rdx #len--
0x2d5: 75df02000000000000   | 	jge M6 
0x2de: 90                   | 	ret #if len<= return   
0x2df:                      | M6:
0x2df: 50871000000000000000 |     mrmovq 16(%rdi), %r8    # src[i+2] to %r8
0x2e9: 50971800000000000000 | 	mrmovq 24(%rdi), %r9    	# src[i+3] to %r9
0x2f3: 4081f0ffffffffffffff | 	rmmovq %r8, -16(%rcx)     	# src[i+2] to dst[len -3]
0x2fd: 6288                 |     andq   %r8, %r8       	# src[i+2] <= 0?
0x2ff: 711303000000000000   |     jle M7
0x308: 6080                 |     addq %r8, %rax #sum +=src[i+2]
0x30a: 701503000000000000   |     jmp M8
0x313:                      | M7:
0x313: 6180                 |     subq %r8, %rax
0x315:                      | M8:
0x315: 61c2                 |     subq  %r12, %rdx #len--
0x317: 752103000000000000   | 	jge M9 
0x320: 90                   | 	ret #if len<= return   
0x321:                      | M9:
0x321: 4091e8ffffffffffffff |     rmmovq %r9, -24(%rcx) # src [i+3] to dst[len-4]
0x32b: 6299                 |     andq   %r9, %r9      # src [i+3] <= 0?
0x32d: 714103000000000000   |     jle M10
0x336: 6090                 |     addq %r9, %rax #sum +=src[i+3]
0x338: 704303000000000000   |     jmp M11
0x341:                      | M10:
0x341: 6190                 |     subq %r9, %rax
0x343:                      | M11:
0x343: 61c2                 |     subq  %r12, %rdx #len--
0x345: 754f03000000000000   | 	jge M12 
0x34e: 90                   | 	ret #if len<= return 
0x34f:                      | M12:
0x34f: 50872000000000000000 |     mrmovq 32(%rdi), %r8    # src[i+4] to %r8
0x359: 50972800000000000000 |     mrmovq 40(%rdi), %r9    # src[i+5] to %r9
0x363: 4081e0ffffffffffffff | 	rmmovq %r8, -32(%rcx)   # src[i+4] to dst[len-5]
0x36d: 6288                 |     andq   %r8, %r8       	# src[i+4] <= 0?
0x36f: 718303000000000000   |     jle M13
0x378: 6080                 |     addq %r8, %rax #sum +=src[i+4]
0x37a: 708503000000000000   |     jmp M14
0x383:                      | M13:
0x383: 6180                 |     subq %r8, %rax 
0x385:                      | M14:
0x385: 61c2                 |     subq  %r12, %rdx #len--
0x387: 759103000000000000   | 	jge M15 
0x390: 90                   | 	ret #if len<= return   
0x391:                      | M15:
0x391: 4091d8ffffffffffffff |     rmmovq %r9, -40(%rcx) # src [i+5] to dst[len-6]
0x39b: 6299                 |     andq   %r9, %r9      # src [i+5] <= 0?
0x39d: 71b103000000000000   |     jle M16
0x3a6: 6090                 |     addq %r9, %rax #sum +=src[i+5]
0x3a8: 70b303000000000000   |     jmp M17
0x3b1:                      | M16:
0x3b1: 6190                 |     subq %r9, %rax
0x3b3:                      | M17:
0x3b3: 61c2                 |     subq  %r12, %rdx #len--
0x3b5: 75bf03000000000000   | 	jge M18
0x3be: 90                   | 	ret #if len<= return   
0x3bf:                      | M18:
0x3bf: 50873000000000000000 |     mrmovq 48(%rdi), %r8    # src[i+6] to %r8
0x3c9: 4081d0ffffffffffffff | 	rmmovq %r8, -48(%rcx)   # src[i+6] to dst[len-7]
0x3d3: 6288                 |     andq   %r8, %r8       	# src[i+6] <= 0?
0x3d5: 71e903000000000000   |     jle M19
0x3de: 6080                 |     addq %r8, %rax #sum +=src[i+6]
0x3e0: 70eb03000000000000   |     jmp M20
0x3e9:                      | M19:
0x3e9: 6180                 |     subq %r8, %rax 
0x3eb:                      | M20:
0x3eb: 90                   |     ret
                            | 
0x3ec:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination in reverse.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x3ec:                      | check:
                            | 	# Return value test
0x3ec: 30fa0000000000000000 | 	irmovq $0,%r10
0x3f6: 61a0                 | 	subq %r10,%rax
0x3f8: 731404000000000000   | 	je checkb
0x401: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x40b: 705e05000000000000   | 	jmp cdone
0x414:                      | checkb:
                            | 	# Code length check
0x414: 30f0ec03000000000000 | 	irmovq EndFun,%rax
0x41e: 30f2a900000000000000 | 	irmovq StartFun,%rdx
0x428: 6120                 | 	subq %rdx,%rax
0x42a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x434: 6102                 | 	subq %rax,%rdx
0x436: 755204000000000000   | 	jge checkm
0x43f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x449: 705e05000000000000   | 	jmp cdone
0x452:                      | checkm:
0x452: 30f6f8ffffffffffffff |     irmovq $-8, %rsi
0x45c: 30f27805000000000000 | 	irmovq dest, %rdx 
0x466: 6062                 | 	addq %rsi, %rdx   # Pointer to next destination location
0x468: 30f36005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x472: 30f7ce00000000000000 | 	irmovq $K,%rdi  # Count
0x47c: 6277                 | 	andq %rdi,%rdi
0x47e: 73dc04000000000000   | 	je checkpre         # Skip check if count = 0
0x487:                      | mcloop:
0x487: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x491: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x49b: 6160                 | 	subq %rsi,%rax
0x49d: 73b904000000000000   | 	je  mok
0x4a6: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4b0: 705e05000000000000   | 	jmp cdone
0x4b9:                      | mok:
0x4b9: 30f00800000000000000 | 	irmovq $8,%rax
0x4c3: 6102                 | 	subq %rax,%rdx	  # dest--
0x4c5: 6003                 | 	addq %rax,%rbx    # src++
0x4c7: 30f00100000000000000 | 	irmovq $1,%rax
0x4d1: 6107                 | 	subq %rax,%rdi    # cnt--
0x4d3: 768704000000000000   | 	jg mcloop
0x4dc:                      | checkpre:
                            | 	# Check for corruption
0x4dc: 30f27005000000000000 | 	irmovq Predest,%rdx
0x4e6: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4f0: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x4fa: 6120                 | 	subq %rdx,%rax
0x4fc: 731805000000000000   | 	je checkpost
0x505: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x50f: 705e05000000000000   | 	jmp cdone
0x518:                      | checkpost:
                            | 	# Check for corruption
0x518: 30f27805000000000000 | 	irmovq Postdest,%rdx
0x522: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x52c: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x536: 6120                 | 	subq %rdx,%rax
0x538: 735405000000000000   | 	je checkok
0x541: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x54b: 705e05000000000000   | 	jmp cdone
0x554:                      | checkok:
                            | 	# Successful checks
0x554: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x55e:                      | cdone:
0x55e: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x560:                      | 	.align 8
0x560:                      | src:
0x560: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x570:                      | 	.align 16
0x570:                      | Predest:
0x570: fadebc0000000000     | 	.quad 0xbcdefa
0x578:                      | dest:
0x578:                      | Postdest:
0x578: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x580:                      | .align 8
                            | # Run time stack
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
                            | 
0x600:                      | Stack:
